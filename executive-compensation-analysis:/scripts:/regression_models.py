{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "0c043de8-26ac-4e00-b992-65bff3eb3dd8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# -*- coding: utf-8 -*-\n",
    "# Imports for panel regression analysis\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import statsmodels.api as sm\n",
    "from linearmodels.panel import PanelOLS\n",
    "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
    "import os\n",
    "\n",
    "# Ensure outputs folder exists\n",
    "os.makedirs(\"outputs\", exist_ok=True)\n",
    "\n",
    "# Optional: display all columns fully\n",
    "pd.set_option('display.max_columns', None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "233cd4dd-b816-4863-9c4e-ca6e69628fdf",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "\n",
    "# Ensure outputs folder exists\n",
    "os.makedirs(\"outputs\", exist_ok=True)\n",
    "\n",
    "# Save panel_data as CSV\n",
    "panel_data.to_csv(\"outputs/panel_data.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "d1dd805d-0b6c-46a4-b729-d59d9ff751c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "panel_data = pd.read_csv(\"outputs/panel_data.csv\", index_col=[0,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "d4e0b96b-5e73-44ff-aaa5-d5fc7dff7f6a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                          PanelOLS Estimation Summary                           \n",
      "================================================================================\n",
      "Dep. Variable:                    roe   R-squared:                        0.1246\n",
      "Estimator:                   PanelOLS   R-squared (Between):              0.8779\n",
      "No. Observations:                 500   R-squared (Within):               0.1189\n",
      "Date:                Fri, Aug 29 2025   R-squared (Overall):              0.5892\n",
      "Time:                        20:20:09   Log-likelihood                   -1028.1\n",
      "Cov. Estimator:                Robust                                           \n",
      "                                        F-statistic:                      10.315\n",
      "Entities:                          50   P-value                           0.0000\n",
      "Avg Obs:                      10.0000   Distribution:                   F(6,435)\n",
      "Min Obs:                      10.0000                                           \n",
      "Max Obs:                      10.0000   F-statistic (robust):             9.8399\n",
      "                                        P-value                           0.0000\n",
      "Time periods:                      10   Distribution:                   F(6,435)\n",
      "Avg Obs:                       50.000                                           \n",
      "Min Obs:                       50.000                                           \n",
      "Max Obs:                       50.000                                           \n",
      "                                                                                \n",
      "                             Parameter Estimates                              \n",
      "==============================================================================\n",
      "            Parameter  Std. Err.     T-stat    P-value    Lower CI    Upper CI\n",
      "------------------------------------------------------------------------------\n",
      "salary         0.0170     0.1063     0.1596     0.8733     -0.1920      0.2259\n",
      "bonus         -0.0505     0.1897    -0.2662     0.7902     -0.4234      0.3224\n",
      "equity         0.3793     0.0500     7.5802     0.0000      0.2809      0.4776\n",
      "firm_size      0.0204     0.1000     0.2037     0.8387     -0.1762      0.2169\n",
      "leverage      -0.2438     0.4946    -0.4929     0.6223     -1.2159      0.7283\n",
      "ceo_tenure  9.901e-05     0.0233     0.0043     0.9966     -0.0456      0.0458\n",
      "==============================================================================\n",
      "\n",
      "F-test for Poolability: 0.9994\n",
      "P-value: 0.4810\n",
      "Distribution: F(58,435)\n",
      "\n",
      "Included effects: Entity, Time\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "\n",
    "# Ensure outputs folder exists\n",
    "os.makedirs(\"outputs\", exist_ok=True)\n",
    "\n",
    "# Save panel_data if it hasn't been saved yet\n",
    "try:\n",
    "    panel_data = pd.read_csv(\"outputs/panel_data.csv\", index_col=[0,1])\n",
    "except FileNotFoundError:\n",
    "    print(\"panel_data.csv not found â€” saving from in-memory DataFrame...\")\n",
    "    panel_data.to_csv(\"outputs/panel_data.csv\")\n",
    "    panel_data = pd.read_csv(\"outputs/panel_data.csv\", index_col=[0,1])\n",
    "\n",
    "# Now run your regressions and save outputs\n",
    "fe_results = fixed_effects_model(\n",
    "    panel_data,\n",
    "    \"roe ~ salary + bonus + equity + firm_size + leverage + ceo_tenure + EntityEffects + TimeEffects\",\n",
    "    save_path=\"outputs/fe_summary.txt\"\n",
    ")\n",
    "print(fe_results.summary)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "c761b2a6-573f-437e-99e4-95910135fad3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fixed Effects Function\n",
    "def fixed_effects_model(data, formula, save_path=None):\n",
    "    \"\"\"\n",
    "    Runs a fixed effects panel regression with robust standard errors.\n",
    "    Optionally saves the summary to a text file.\n",
    "    \"\"\"\n",
    "    model = PanelOLS.from_formula(formula, data=data)\n",
    "    results = model.fit(cov_type=\"robust\")\n",
    "    \n",
    "    if save_path:\n",
    "        with open(save_path, \"w\") as f:\n",
    "            f.write(results.summary.as_text())\n",
    "            \n",
    "    return results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "24f42c3e-9f77-4c4a-b9ac-7f370c895d7c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Lagged Regression Function\n",
    "def lagged_regression(data, target, lag_var, lag_periods=2, control_vars=None, save_path=None):\n",
    "    \"\"\"\n",
    "    Creates lagged variable and runs panel regression.\n",
    "    Optionally saves summary to a text file.\n",
    "    \"\"\"\n",
    "    data[f\"{lag_var}_lag{lag_periods}\"] = data.groupby('firm_id')[lag_var].shift(lag_periods)\n",
    "    formula = f\"{target} ~ 1 + {lag_var}_lag{lag_periods}\"\n",
    "    if control_vars:\n",
    "        formula += \" + \" + \" + \".join(control_vars)\n",
    "    formula += \" + EntityEffects + TimeEffects\"\n",
    "    \n",
    "    model = PanelOLS.from_formula(formula, data=data)\n",
    "    results = model.fit(cov_type=\"robust\")\n",
    "    \n",
    "    if save_path:\n",
    "        with open(save_path, \"w\") as f:\n",
    "            f.write(results.summary.as_text())\n",
    "            \n",
    "    return results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "a4cac7af-0a0d-4f5c-9df8-3b63a36438e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# VIF Function\n",
    "def calculate_vif(df, variables, save_path=None):\n",
    "    \"\"\"\n",
    "    Calculates Variance Inflation Factor (VIF) for a set of independent variables.\n",
    "    Optionally saves results to CSV.\n",
    "    \"\"\"\n",
    "    X = df[variables].dropna()\n",
    "    vif_data = pd.DataFrame()\n",
    "    vif_data[\"Variable\"] = variables\n",
    "    vif_data[\"VIF\"] = [variance_inflation_factor(X.values, i) for i in range(len(variables))]\n",
    "    \n",
    "    if save_path:\n",
    "        vif_data.to_csv(save_path, index=False)\n",
    "        \n",
    "    return vif_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "5fd6a58e-dd30-4e8e-ade5-42aa0d4a19f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Hausman Test Function\n",
    "def hausman_test(fe_model, re_model, save_path=None):\n",
    "    \"\"\"\n",
    "    Compares fixed and random effects models using Hausman test logic.\n",
    "    Optionally saves comparison table to CSV.\n",
    "    \"\"\"\n",
    "    comparison = compare({\"FE\": fe_model, \"RE\": re_model})\n",
    "    \n",
    "    if save_path:\n",
    "        comparison.to_csv(save_path)\n",
    "        \n",
    "    return comparison"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "9b625336-1978-41ff-a213-7faf956cdde6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                          PanelOLS Estimation Summary                           \n",
      "================================================================================\n",
      "Dep. Variable:                    roe   R-squared:                        0.1246\n",
      "Estimator:                   PanelOLS   R-squared (Between):              0.8779\n",
      "No. Observations:                 500   R-squared (Within):               0.1189\n",
      "Date:                Fri, Aug 29 2025   R-squared (Overall):              0.5892\n",
      "Time:                        20:20:47   Log-likelihood                   -1028.1\n",
      "Cov. Estimator:                Robust                                           \n",
      "                                        F-statistic:                      10.315\n",
      "Entities:                          50   P-value                           0.0000\n",
      "Avg Obs:                      10.0000   Distribution:                   F(6,435)\n",
      "Min Obs:                      10.0000                                           \n",
      "Max Obs:                      10.0000   F-statistic (robust):             9.8399\n",
      "                                        P-value                           0.0000\n",
      "Time periods:                      10   Distribution:                   F(6,435)\n",
      "Avg Obs:                       50.000                                           \n",
      "Min Obs:                       50.000                                           \n",
      "Max Obs:                       50.000                                           \n",
      "                                                                                \n",
      "                             Parameter Estimates                              \n",
      "==============================================================================\n",
      "            Parameter  Std. Err.     T-stat    P-value    Lower CI    Upper CI\n",
      "------------------------------------------------------------------------------\n",
      "salary         0.0170     0.1063     0.1596     0.8733     -0.1920      0.2259\n",
      "bonus         -0.0505     0.1897    -0.2662     0.7902     -0.4234      0.3224\n",
      "equity         0.3793     0.0500     7.5802     0.0000      0.2809      0.4776\n",
      "firm_size      0.0204     0.1000     0.2037     0.8387     -0.1762      0.2169\n",
      "leverage      -0.2438     0.4946    -0.4929     0.6223     -1.2159      0.7283\n",
      "ceo_tenure  9.901e-05     0.0233     0.0043     0.9966     -0.0456      0.0458\n",
      "==============================================================================\n",
      "\n",
      "F-test for Poolability: 0.9994\n",
      "P-value: 0.4810\n",
      "Distribution: F(58,435)\n",
      "\n",
      "Included effects: Entity, Time\n",
      "                          PanelOLS Estimation Summary                           \n",
      "================================================================================\n",
      "Dep. Variable:                    roe   R-squared:                        0.0048\n",
      "Estimator:                   PanelOLS   R-squared (Between):             -0.0023\n",
      "No. Observations:                 400   R-squared (Within):               0.0032\n",
      "Date:                Fri, Aug 29 2025   R-squared (Overall):              0.0026\n",
      "Time:                        20:20:47   Log-likelihood                   -849.15\n",
      "Cov. Estimator:                Robust                                           \n",
      "                                        F-statistic:                      0.5466\n",
      "Entities:                          50   P-value                           0.6508\n",
      "Avg Obs:                       8.0000   Distribution:                   F(3,340)\n",
      "Min Obs:                       8.0000                                           \n",
      "Max Obs:                       8.0000   F-statistic (robust):             0.5661\n",
      "                                        P-value                           0.6377\n",
      "Time periods:                       8   Distribution:                   F(3,340)\n",
      "Avg Obs:                       50.000                                           \n",
      "Min Obs:                       50.000                                           \n",
      "Max Obs:                       50.000                                           \n",
      "                                                                                \n",
      "                              Parameter Estimates                              \n",
      "===============================================================================\n",
      "             Parameter  Std. Err.     T-stat    P-value    Lower CI    Upper CI\n",
      "-------------------------------------------------------------------------------\n",
      "Intercept       2.7880     1.2974     2.1489     0.0323      0.2361      5.3400\n",
      "equity_lag2     0.0519     0.0616     0.8427     0.4000     -0.0693      0.1731\n",
      "firm_size      -0.0520     0.1226    -0.4243     0.6716     -0.2932      0.1891\n",
      "leverage       -0.5317     0.5821    -0.9135     0.3616     -1.6767      0.6132\n",
      "===============================================================================\n",
      "\n",
      "F-test for Poolability: 0.8127\n",
      "P-value: 0.8267\n",
      "Distribution: F(56,340)\n",
      "\n",
      "Included effects: Entity, Time\n",
      "    Variable        VIF\n",
      "0     salary  23.539514\n",
      "1      bonus  16.370680\n",
      "2     equity  15.838010\n",
      "3  firm_size  42.705507\n",
      "4   leverage   7.248377\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/venkatcheeku/Downloads/Downloads/anaconda3/lib/python3.12/site-packages/linearmodels/panel/model.py:1260: MissingValueWarning: \n",
      "Inputs contain missing values. Dropping rows with missing observations.\n",
      "  super().__init__(dependent, exog, weights=weights, check_rank=check_rank)\n"
     ]
    },
    {
     "ename": "KeyError",
     "evalue": "'firm_id'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "File \u001b[0;32m~/Downloads/anaconda3/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3804\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m-> 3805\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_engine\u001b[38;5;241m.\u001b[39mget_loc(casted_key)\n\u001b[1;32m   3806\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n",
      "File \u001b[0;32mindex.pyx:167\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "File \u001b[0;32mindex.pyx:196\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "File \u001b[0;32mpandas/_libs/hashtable_class_helper.pxi:7081\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "File \u001b[0;32mpandas/_libs/hashtable_class_helper.pxi:7089\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'firm_id'",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[44], line 34\u001b[0m\n\u001b[1;32m     30\u001b[0m \u001b[38;5;28mprint\u001b[39m(vif)\n\u001b[1;32m     32\u001b[0m \u001b[38;5;66;03m# 4. Optional Hausman Test (FE vs RE)\u001b[39;00m\n\u001b[1;32m     33\u001b[0m \u001b[38;5;66;03m# Example RE model using GEE\u001b[39;00m\n\u001b[0;32m---> 34\u001b[0m re_model \u001b[38;5;241m=\u001b[39m sm\u001b[38;5;241m.\u001b[39mGEE\u001b[38;5;241m.\u001b[39mfrom_formula(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mroe ~ bonus + equity\u001b[39m\u001b[38;5;124m\"\u001b[39m, groups\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mfirm_id\u001b[39m\u001b[38;5;124m\"\u001b[39m, data\u001b[38;5;241m=\u001b[39mpanel_data)\u001b[38;5;241m.\u001b[39mfit()\n\u001b[1;32m     35\u001b[0m hausman \u001b[38;5;241m=\u001b[39m hausman_test(fe_results, re_model, save_path\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124moutputs/hausman_comparison.csv\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m     36\u001b[0m \u001b[38;5;28mprint\u001b[39m(hausman)\n",
      "File \u001b[0;32m~/Downloads/anaconda3/lib/python3.12/site-packages/statsmodels/genmod/generalized_estimating_equations.py:731\u001b[0m, in \u001b[0;36mGEE.from_formula\u001b[0;34m(cls, formula, groups, data, subset, time, offset, exposure, *args, **kwargs)\u001b[0m\n\u001b[1;32m    729\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(groups, \u001b[38;5;28mstr\u001b[39m):\n\u001b[1;32m    730\u001b[0m     groups_name \u001b[38;5;241m=\u001b[39m groups\n\u001b[0;32m--> 731\u001b[0m     groups \u001b[38;5;241m=\u001b[39m data[groups]\n\u001b[1;32m    733\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(time, \u001b[38;5;28mstr\u001b[39m):\n\u001b[1;32m    734\u001b[0m     time \u001b[38;5;241m=\u001b[39m data[time]\n",
      "File \u001b[0;32m~/Downloads/anaconda3/lib/python3.12/site-packages/pandas/core/frame.py:4102\u001b[0m, in \u001b[0;36mDataFrame.__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   4100\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m.\u001b[39mnlevels \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[1;32m   4101\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_getitem_multilevel(key)\n\u001b[0;32m-> 4102\u001b[0m indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m.\u001b[39mget_loc(key)\n\u001b[1;32m   4103\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_integer(indexer):\n\u001b[1;32m   4104\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m [indexer]\n",
      "File \u001b[0;32m~/Downloads/anaconda3/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3807\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(casted_key, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;129;01mor\u001b[39;00m (\n\u001b[1;32m   3808\u001b[0m         \u001b[38;5;28misinstance\u001b[39m(casted_key, abc\u001b[38;5;241m.\u001b[39mIterable)\n\u001b[1;32m   3809\u001b[0m         \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28many\u001b[39m(\u001b[38;5;28misinstance\u001b[39m(x, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;28;01mfor\u001b[39;00m x \u001b[38;5;129;01min\u001b[39;00m casted_key)\n\u001b[1;32m   3810\u001b[0m     ):\n\u001b[1;32m   3811\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m InvalidIndexError(key)\n\u001b[0;32m-> 3812\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[1;32m   3813\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[1;32m   3814\u001b[0m     \u001b[38;5;66;03m# If we have a listlike key, _check_indexing_error will raise\u001b[39;00m\n\u001b[1;32m   3815\u001b[0m     \u001b[38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise\u001b[39;00m\n\u001b[1;32m   3816\u001b[0m     \u001b[38;5;66;03m#  the TypeError.\u001b[39;00m\n\u001b[1;32m   3817\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_indexing_error(key)\n",
      "\u001b[0;31mKeyError\u001b[0m: 'firm_id'"
     ]
    }
   ],
   "source": [
    "# Example Execution with Output Saving\n",
    "# Load panel dataset (ensure MultiIndex: firm_id, year)\n",
    "panel_data = pd.read_csv(\"outputs/panel_data.csv\", index_col=[0,1])\n",
    "\n",
    "# 1. Fixed Effects Regression\n",
    "fe_results = fixed_effects_model(\n",
    "    panel_data,\n",
    "    \"roe ~ salary + bonus + equity + firm_size + leverage + ceo_tenure + EntityEffects + TimeEffects\",\n",
    "    save_path=\"outputs/fe_summary.txt\"\n",
    ")\n",
    "print(fe_results.summary)\n",
    "\n",
    "# 2. Lagged Regression\n",
    "lag_results = lagged_regression(\n",
    "    panel_data,\n",
    "    target=\"roe\",\n",
    "    lag_var=\"equity\",\n",
    "    lag_periods=2,\n",
    "    control_vars=[\"firm_size\",\"leverage\"],\n",
    "    save_path=\"outputs/lagged_summary.txt\"\n",
    ")\n",
    "print(lag_results.summary)\n",
    "\n",
    "# 3. VIF Calculation\n",
    "vif = calculate_vif(\n",
    "    panel_data,\n",
    "    [\"salary\",\"bonus\",\"equity\",\"firm_size\",\"leverage\"],\n",
    "    save_path=\"outputs/vif_results.csv\"\n",
    ")\n",
    "print(vif)\n",
    "\n",
    "# 4. Optional Hausman Test (FE vs RE)\n",
    "# Example RE model using GEE\n",
    "re_model = sm.GEE.from_formula(\"roe ~ bonus + equity\", groups=\"firm_id\", data=panel_data).fit()\n",
    "hausman = hausman_test(fe_results, re_model, save_path=\"outputs/hausman_comparison.csv\")\n",
    "print(hausman)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
